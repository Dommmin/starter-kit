version: "3.9"
services:
  proxy:
    build:
      context: .
      dockerfile: ./Dockerfile.proxy
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./deployment/config/proxy.conf:/etc/nginx/nginx.conf
    depends_on:
      - nginx

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      target: dev
    command: sh -c "npm install && npm run dev"
    restart: unless-stopped
    volumes:
      - ./frontend:/usr/src
    environment:
      - NODE_ENV=local
    depends_on:
      - api
    ports:
      - "3000:5173"

  api:
    build:
      args:
        user: dominik
        uid: 1000
      context: .
      dockerfile: ./api/Dockerfile
      target: api
    command: sh -c "composer install --no-scripts && chmod +x /usr/src/update.sh && ./update.sh && php-fpm"
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./api:/usr/src
      - .env:/usr/src/.env
      - ./deployment/config/php-fpm/php-dev.ini:/usr/local/etc/php/conf.d/php.ini
      - ./deployment/bin/update.sh:/usr/src/update.sh
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  scheduler:
    build:
      args:
          user: dominik
          uid: 1000
      context: .
      dockerfile: ./api/Dockerfile
      target: scheduler
    command: sh -c "chmod +x /usr/src/scheduler.sh && /usr/src/scheduler.sh"
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./api:/usr/src
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  worker:
    build:
      args:
        user: dominik
        uid: 1000
      context: .
      dockerfile: ./api/Dockerfile
      target: worker
    command: sh -c "chmod +x /usr/src/worker.sh && /usr/src/worker.sh"
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./api:/usr/src
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  nginx:
    build:
      context: .
      dockerfile: ./Dockerfile.nginx
    command: sh -c "nginx -g \"daemon off;\""
    restart: unless-stopped
    volumes:
      - ./api:/usr/src
      - ./deployment/config/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api

  mysql:
    build:
      args:
        password: secret
      context: .
      dockerfile: ./Dockerfile.mysql
    restart: unless-stopped
    volumes:
      - ./mysqldata:/var/lib/mysql
    ports:
      - "33060:3306"
    healthcheck:
      test: mysql -h localhost -u root -psecret -e 'SELECT version();'
      start_period: 5s
      interval: 15s
      timeout: 5s
      retries: 5
    environment:
      - MYSQL_ROOT_PASSWORD=secret

  redis:
    image: redis:latest
    restart: unless-stopped
    volumes:
      - ./redisdata:/data
    ports:
      - "63790:6379"
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "1080:1080"

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8888:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: secret
    depends_on:
      - mysql

  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8080:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
